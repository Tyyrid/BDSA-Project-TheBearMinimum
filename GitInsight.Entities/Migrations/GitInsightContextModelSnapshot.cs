// <auto-generated />
using System;
using GitInsight.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GitInsight.Entities.Migrations
{
    [DbContext(typeof(GitInsightContext))]
    partial class GitInsightContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GitInsight.Entities.DBAnalysis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GitRepository")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LatestCommitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DBAnalysis_s");
                });

            modelBuilder.Entity("GitInsight.Entities.DBFrequency", b =>
                {
                    b.Property<int>("DBAnalysisId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Frequency")
                        .HasColumnType("int");

                    b.HasKey("DBAnalysisId", "Date");

                    b.ToTable("DBFrequencies");
                });

            modelBuilder.Entity("GitInsight.Entities.DBFrequency", b =>
                {
                    b.HasOne("GitInsight.Entities.DBAnalysis", "DBAnalysis")
                        .WithMany("Frequencies")
                        .HasForeignKey("DBAnalysisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DBAnalysis");
                });

            modelBuilder.Entity("GitInsight.Entities.DBAnalysis", b =>
                {
                    b.Navigation("Frequencies");
                });
#pragma warning restore 612, 618
        }
    }
}
