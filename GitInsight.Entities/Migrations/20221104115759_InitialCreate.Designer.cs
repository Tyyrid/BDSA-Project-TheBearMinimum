// <auto-generated />
using System;
using GitInsight.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GitInsight.Entities.Migrations
{
    [DbContext(typeof(GitInsightContext))]
    [Migration("20221104115759_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.10");

            modelBuilder.Entity("GitInsight.Entities.DBCommit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Author")
                        .HasColumnType("TEXT");

                    b.Property<int>("CommitID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GitRepository")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DBCommit");
                });

            modelBuilder.Entity("GitInsight.Entities.DBFrequency", b =>
                {
                    b.Property<int>("DBCommitId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("Frequency")
                        .HasColumnType("INTEGER");

                    b.HasKey("DBCommitId", "Date");

                    b.ToTable("DBFrequency");
                });

            modelBuilder.Entity("GitInsight.Entities.DBFrequency", b =>
                {
                    b.HasOne("GitInsight.Entities.DBCommit", "DBCommit")
                        .WithMany("Frequencies")
                        .HasForeignKey("DBCommitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DBCommit");
                });

            modelBuilder.Entity("GitInsight.Entities.DBCommit", b =>
                {
                    b.Navigation("Frequencies");
                });
#pragma warning restore 612, 618
        }
    }
}
