@inject HttpClient Http

<RadzenText TextStyle="TextStyle.H3" TagName="TagName.H1" Class="my-4">
    Number of commits 
</RadzenText>

    <div class="container my-5">
        <div class="row">
            <div class="col">
                <RadzenCard Class="w-100 mb-4" Style="display: flex; align-items: center; gap: 0.5rem" >
                    <RadzenCheckBox @bind-Value="@smooth" Name="smooth"></RadzenCheckBox>
                    <RadzenLabel Text="Smooth" For="smooth" Style="margin-right: 1rem;"/>
                    <RadzenCheckBox @bind-Value="@showDataLabels" Name="dataLabels"></RadzenCheckBox>
                    <RadzenLabel Text="Show Data Labels" For="dataLabels" />
                </RadzenCard>
                <RadzenChart>
                    <RadzenText> Hej </RadzenText>
                    <RadzenAreaSeries Smooth="@smooth" Data="@data" CategoryProperty="Date" Title="Commits" ValueProperty="amountOfCommit" RenderingOrder="1">
                        <RadzenSeriesDataLabels Visible="@showDataLabels" />
                        <RadzenLegend Visible="false" />
                    </RadzenAreaSeries>
                    <RadzenCategoryAxis Padding="20" Formatter="@FormatAsMonth" />
                    <RadzenValueAxis Formatter="@AddAndConvertCommits">
                        <RadzenGridLines Visible="true" />
                        <RadzenAxisTitle Text="Commits" />
                    </RadzenValueAxis>
                </RadzenChart>
            </div>
        </div>
    </div>


@code {
    //Husk at dataen skal v√¶re sorteret efter dato
    bool smooth = true;
    bool showDataLabels = false;
    private DataItem[]? data;

    class DataItem
    {
        public string Author { get; set; }
        public string Date { get; set; }
        //public double Revenue { get; set; }
        public int amountOfCommit { get; set; }
    }
    protected override async Task OnInitializedAsync()
    {
        data = await Http.GetFromJsonAsync<DataItem[]>("Data/data.json");
    }

    string AddAndConvertCommits(object value)
    {
        if (value != null)
        {
            return value.ToString();
        }
        return "0";
    }

    string FormatAsMonth(object value)
    {
        if (value != null)
        {
            return Convert.ToDateTime(value).ToString("MMM-yyyy");
        }

        return string.Empty;
    }
/*
    DataItem[] revenue2019 = new DataItem[] {
        new DataItem
        {
            Date = ("2019-01-01"),
            Revenue = 234000
        },
        new DataItem
        {
            Date = ("2019-02-01"),
            Revenue = 269000
        },
        new DataItem
        {
            Date = ("2019-03-01"),
            Revenue = 233000
        },
        new DataItem
        {
            Date = ("2019-04-01"),
            Revenue = 244000
        },
        new DataItem
        {
            Date = ("2019-05-01"),
            Revenue = 214000
        },
        new DataItem
        {
            Date = ("2019-06-01"),
            Revenue = 253000
        },
        new DataItem
        {
            Date = ("2019-07-01"),
            Revenue = 274000
        },
        new DataItem
        {
            Date = ("2019-08-01"),
            Revenue = 284000
        },
        new DataItem
        {
            Date = ("2019-09-01"),
            Revenue = 273000
        },
        new DataItem
        {
            Date = ("2019-10-01"),
            Revenue = 282000
        },
        new DataItem
        {
            Date = ("2019-11-01"),
            Revenue = 289000
        },
        new DataItem
        {
            Date = ("2019-12-01"),
            Revenue = 294000
        }
    };
*/

}